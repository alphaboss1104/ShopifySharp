{
/*
    Add the following snippet to your C# user snippets in VSCode.
*/
	"Setup ShopifySharp Test": {
		"prefix": "test-shopifysharp",
		"body": [
			"using System;",
			"using System.Collections.Generic;",
			"using System.Linq;",
			"using System.Net;",
			"using System.Threading.Tasks;",
			"using Xunit;",
			"",
			"namespace ShopifySharp.Tests",
			"{",
			"	[Trait(\"Category\", \"$1\")]",
			"	public class $1_Tests : IClassFixture<$1_Tests_Fixture>",
			"	{",
			"		private $1_Tests_Fixture Fixture { get; }",
			"",
			"		public $1_Tests($1_Tests_Fixture fixture)",
			"		{",
			"			this.Fixture = fixture;",
			"		}",
			"",
			"		[Fact]",
			"		public async Task Counts_$1s()",
			"		{",
			"			var count = await Fixture.Service.CountAsync();",
			"",
			"			Assert.True(count > 0);",
			"		}",
			"",
			"		[Fact]",
			"		public async Task Lists_$1s()",
			"		{",
			"			var list = await Fixture.Service.ListAsync();",
			"",
			"			Assert.True(list.Count() > 0);",
			"		}",
			"",
			"		[Fact]",
			"		public async Task Deletes_$1s()",
			"		{",
			"			var created = await Fixture.Create(true);",
			"			bool threw = false;",
			"",
			"			try",
			"			{",
			"				await Fixture.Service.DeleteAsync(created.Id.Value);",
			"			}",
			"			catch (ShopifyException ex)",
			"			{",
			"				Console.WriteLine($\"{nameof(Deletes_$1s)} failed. {ex.Message}\");",
			"",
			"				threw = true;",
			"			}",
			"",
			"			Assert.False(threw);",
			"		}",
			"",
			"		[Fact]",
			"		public async Task Gets_$1s()",
			"		{",
			"			var obj = await Fixture.Service.GetAsync(Fixture.Created.First().Id.Value);",
			"",
			"			Assert.NotNull(obj);",
			"			Assert.True(obj.Id.HasValue);",
			"		}",
			"",
			"		[Fact]",
			"		public async Task Creates_$1s()",
			"		{",
			"			var obj = await Fixture.Create();",
			"",
			"			Assert.NotNull(obj);",
			"			Assert.True(obj.Id.HasValue);",
			"		}",
			"",
			"		[Fact]",
			"		public async Task Updates_$1s()",
			"		{",
			"			string newValue = \"New Value\";",
			"			var original = Fixture.Created.First();",
			"			original.Value = newValue;",
			"			",
			"			var updated = await Fixture.Service.UpdateAsync(original);",
			"",
			"			Assert.Equal(newValue, updated.Value);   ",
			"		}",
			"	}",
			"",
			"	public class $1_Tests_Fixture: IAsyncLifetime",
			"	{",
			"		public $1Service Service => new $1Service(Utils.MyShopifyUrl, Utils.AccessToken);",
			"",	
			"		public List<$1> Created { get; } = new List<$1>();",
			"",	
			"		public async Task InitializeAsync()",
			"		{",
			"			// Create one for count, list, get, etc. tests.",
			"			await Create();",
			"		}",
			"",	
			"		public async Task DisposeAsync()",
			"		{",
			"			foreach (var obj in Created)",
			"			{",
			"				try",
			"				{",
			"					await Service.DeleteAsync(obj.Id.Value);",
			"				}",
			"				catch (ShopifyException ex)",
			"				{",
			"					if (ex.HttpStatusCode != HttpStatusCode.NotFound)",
			"					{",
			"						Console.WriteLine($\"Failed to delete created $1 with id {obj.Id.Value}. {ex.Message}\");",
			"					}",
			"				}",
			"			}",
			"		}",
			"",	
			"		/// <summary>",
			"		/// Convenience function for running tests. Creates an object and automatically adds it to the queue for deleting after tests finish.",
			"		/// </summary>",
			"		public async Task<$1> Create(bool skipAddToCreateList = false)",
			"		{",
			"			var obj = await Service.CreateAsync(new $1()",
			"			{",
							"$0",
			"			});",
			"",	
			"			if (! skipAddToCreateList)",
			"			{",
			"				Created.Add(obj);",
			"			}",
			"",	
			"			return obj;",
			"		}",
			"	}",
		    "}"
		],
		"description": "Creates an xunit test class for ShopifySharp."
	}
}